// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: proto/urlserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLs_GetURLByID_FullMethodName       = "/demo.URLs/GetURLByID"
	URLs_GetAllByUserID_FullMethodName   = "/demo.URLs/GetAllByUserID"
	URLs_ReduceAndSaveURL_FullMethodName = "/demo.URLs/ReduceAndSaveURL"
	URLs_ReduceURLToJSON_FullMethodName  = "/demo.URLs/ReduceURLToJSON"
	URLs_ReduceSeveralURL_FullMethodName = "/demo.URLs/ReduceSeveralURL"
	URLs_RemoveAll_FullMethodName        = "/demo.URLs/RemoveAll"
	URLs_PingConnection_FullMethodName   = "/demo.URLs/PingConnection"
	URLs_GetStats_FullMethodName         = "/demo.URLs/GetStats"
)

// URLsClient is the client API for URLs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLsClient interface {
	// GetURLByID returns the URL corresponding to the URL ID
	GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error)
	GetAllByUserID(ctx context.Context, in *GetAllByUserIDRequest, opts ...grpc.CallOption) (*GetAllByUserIDResponse, error)
	ReduceAndSaveURL(ctx context.Context, in *ReduceAndSaveURLRequest, opts ...grpc.CallOption) (*ReduceAndSaveURLResponse, error)
	ReduceURLToJSON(ctx context.Context, in *ReduceURLToJSONRequest, opts ...grpc.CallOption) (*ReduceURLToJSONResponse, error)
	ReduceSeveralURL(ctx context.Context, in *ReduceSeveralURLRequest, opts ...grpc.CallOption) (*ReduceSeveralURLResponse, error)
	RemoveAll(ctx context.Context, in *RemoveAllRequest, opts ...grpc.CallOption) (*RemoveAllResponse, error)
	PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type uRLsClient struct {
	cc grpc.ClientConnInterface
}

func NewURLsClient(cc grpc.ClientConnInterface) URLsClient {
	return &uRLsClient{cc}
}

func (c *uRLsClient) GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error) {
	out := new(GetURLByIDResponse)
	err := c.cc.Invoke(ctx, URLs_GetURLByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) GetAllByUserID(ctx context.Context, in *GetAllByUserIDRequest, opts ...grpc.CallOption) (*GetAllByUserIDResponse, error) {
	out := new(GetAllByUserIDResponse)
	err := c.cc.Invoke(ctx, URLs_GetAllByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) ReduceAndSaveURL(ctx context.Context, in *ReduceAndSaveURLRequest, opts ...grpc.CallOption) (*ReduceAndSaveURLResponse, error) {
	out := new(ReduceAndSaveURLResponse)
	err := c.cc.Invoke(ctx, URLs_ReduceAndSaveURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) ReduceURLToJSON(ctx context.Context, in *ReduceURLToJSONRequest, opts ...grpc.CallOption) (*ReduceURLToJSONResponse, error) {
	out := new(ReduceURLToJSONResponse)
	err := c.cc.Invoke(ctx, URLs_ReduceURLToJSON_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) ReduceSeveralURL(ctx context.Context, in *ReduceSeveralURLRequest, opts ...grpc.CallOption) (*ReduceSeveralURLResponse, error) {
	out := new(ReduceSeveralURLResponse)
	err := c.cc.Invoke(ctx, URLs_ReduceSeveralURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) RemoveAll(ctx context.Context, in *RemoveAllRequest, opts ...grpc.CallOption) (*RemoveAllResponse, error) {
	out := new(RemoveAllResponse)
	err := c.cc.Invoke(ctx, URLs_RemoveAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) PingConnection(ctx context.Context, in *PingConnectionRequest, opts ...grpc.CallOption) (*PingConnectionResponse, error) {
	out := new(PingConnectionResponse)
	err := c.cc.Invoke(ctx, URLs_PingConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLsClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, URLs_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLsServer is the server API for URLs service.
// All implementations must embed UnimplementedURLsServer
// for forward compatibility
type URLsServer interface {
	// GetURLByID returns the URL corresponding to the URL ID
	GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error)
	GetAllByUserID(context.Context, *GetAllByUserIDRequest) (*GetAllByUserIDResponse, error)
	ReduceAndSaveURL(context.Context, *ReduceAndSaveURLRequest) (*ReduceAndSaveURLResponse, error)
	ReduceURLToJSON(context.Context, *ReduceURLToJSONRequest) (*ReduceURLToJSONResponse, error)
	ReduceSeveralURL(context.Context, *ReduceSeveralURLRequest) (*ReduceSeveralURLResponse, error)
	RemoveAll(context.Context, *RemoveAllRequest) (*RemoveAllResponse, error)
	PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedURLsServer()
}

// UnimplementedURLsServer must be embedded to have forward compatible implementations.
type UnimplementedURLsServer struct {
}

func (UnimplementedURLsServer) GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByID not implemented")
}
func (UnimplementedURLsServer) GetAllByUserID(context.Context, *GetAllByUserIDRequest) (*GetAllByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserID not implemented")
}
func (UnimplementedURLsServer) ReduceAndSaveURL(context.Context, *ReduceAndSaveURLRequest) (*ReduceAndSaveURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceAndSaveURL not implemented")
}
func (UnimplementedURLsServer) ReduceURLToJSON(context.Context, *ReduceURLToJSONRequest) (*ReduceURLToJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceURLToJSON not implemented")
}
func (UnimplementedURLsServer) ReduceSeveralURL(context.Context, *ReduceSeveralURLRequest) (*ReduceSeveralURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceSeveralURL not implemented")
}
func (UnimplementedURLsServer) RemoveAll(context.Context, *RemoveAllRequest) (*RemoveAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAll not implemented")
}
func (UnimplementedURLsServer) PingConnection(context.Context, *PingConnectionRequest) (*PingConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingConnection not implemented")
}
func (UnimplementedURLsServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedURLsServer) mustEmbedUnimplementedURLsServer() {}

// UnsafeURLsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLsServer will
// result in compilation errors.
type UnsafeURLsServer interface {
	mustEmbedUnimplementedURLsServer()
}

func RegisterURLsServer(s grpc.ServiceRegistrar, srv URLsServer) {
	s.RegisterService(&URLs_ServiceDesc, srv)
}

func _URLs_GetURLByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetURLByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_GetURLByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetURLByID(ctx, req.(*GetURLByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_GetAllByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetAllByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_GetAllByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetAllByUserID(ctx, req.(*GetAllByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_ReduceAndSaveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceAndSaveURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).ReduceAndSaveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_ReduceAndSaveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).ReduceAndSaveURL(ctx, req.(*ReduceAndSaveURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_ReduceURLToJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceURLToJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).ReduceURLToJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_ReduceURLToJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).ReduceURLToJSON(ctx, req.(*ReduceURLToJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_ReduceSeveralURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceSeveralURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).ReduceSeveralURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_ReduceSeveralURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).ReduceSeveralURL(ctx, req.(*ReduceSeveralURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_RemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).RemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_RemoveAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).RemoveAll(ctx, req.(*RemoveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_PingConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).PingConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_PingConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).PingConnection(ctx, req.(*PingConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLs_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLsServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLs_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLsServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// URLs_ServiceDesc is the grpc.ServiceDesc for URLs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.URLs",
	HandlerType: (*URLsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetURLByID",
			Handler:    _URLs_GetURLByID_Handler,
		},
		{
			MethodName: "GetAllByUserID",
			Handler:    _URLs_GetAllByUserID_Handler,
		},
		{
			MethodName: "ReduceAndSaveURL",
			Handler:    _URLs_ReduceAndSaveURL_Handler,
		},
		{
			MethodName: "ReduceURLToJSON",
			Handler:    _URLs_ReduceURLToJSON_Handler,
		},
		{
			MethodName: "ReduceSeveralURL",
			Handler:    _URLs_ReduceSeveralURL_Handler,
		},
		{
			MethodName: "RemoveAll",
			Handler:    _URLs_RemoveAll_Handler,
		},
		{
			MethodName: "PingConnection",
			Handler:    _URLs_PingConnection_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _URLs_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/urlserver.proto",
}
